lexer grammar SaneqlLexer;

// Channels
channels {
    COMMENT_CHANNEL
}

// Whitespace
WS: [ \t\r\n]+ -> skip;

// Comments
SYM_DOUBLE_DASH_COMMENT: SYM_DOUBLE_DASH -> channel(COMMENT_CHANNEL);

// Keywords
SELECT: 'SELECT';
AS: 'AS';
FROM: 'FROM';
WHERE: 'WHERE';
ORDER: 'ORDER';
BY: 'BY';
DESC: 'DESC';
DESCENDING: 'DESCENDING';
ASC: 'ASC';
ASCENDING: 'ASCENDING';
LIMIT: 'LIMIT';
OFFSET: 'OFFSET';
DISTINCT: 'DISTINCT';
VERSION: 'VERSION';
LATEST_VERSION: 'LATEST_VERSION';
ALL_VERSIONS: 'ALL_VERSIONS';
NULL: 'NULL';
TOP: 'TOP';
FORWARD: 'FORWARD';
BACKWARD: 'BACKWARD';
GROUP: 'GROUP';
HAVING: 'HAVING';
RANK: 'RANK';
OVER: 'OVER';
ALL: 'ALL';
IN:'IN';
MIN:'MIN';
MAX:'MAX';
SUM:'SUM';
AVG:'AVG';
PERIOD: '.';
CREATE: 'CREATE';
INT:' INT';
VARCHAR: 'VARCHAR';
PRIMARY_KEY:'PRIMARY KEY';
UNIQUE:'UNIQUE';
// Operators
CONTAINS: 'CONTAINS';
AND: 'AND';
OR: 'OR';
NOT: 'NOT';
EXISTS: 'EXISTS';
COMPARE_OP: '=' | '!=' | '>' | '>=' | '<' | '<=';
LIKE: 'LIKE';
MATCHES: 'MATCHES';

// Functions
STRING_FUNCTION_ID: 'LENGTH' | 'CONTAINS' | 'POSITION' | 'SUBSTRING' | 'CONCAT_WS' | 'CONCAT';
NUMERIC_FUNCTION_ID: 'ABS' | 'MOD' | 'CEIL' | 'FLOOR' | 'ROUND';
DATE_TIME_FUNCTION_ID: 'NOW' | 'CURRENT_DATE_TIME' | 'CURRENT_DATE' | 'CURRENT_TIMEZONE' | 'CURRENT_TIME';
SUBQUERY_START: 'SUBQUERY_START';
SUBQUERY_END: 'SUBQUERY_END';
// Aggregate functions
COUNT: 'COUNT(' '*' ')' ;
PERCENTILE_CONT: 'PERCENTILE_CONT';
WITHIN_GROUP: 'WITHIN'  'GROUP';
LPAREN: '(';
RPAREN: ')';
ASTERISK: '*';
WITHIN: 'WITHIN';
// Identifiers
IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*;

// Atomic primitive types
BOOLEAN: 'TRUE' | 'FALSE';

// Number literals
INTEGER: DIGIT+;
REAL: DIGIT* '.' DIGIT+;
SCI_INTEGER: INTEGER E_SUFFIX;
SCI_REAL: REAL E_SUFFIX;

// Date, time, datetime
DATE: SINGLE_QUOTE ISO8601_DATE SINGLE_QUOTE | DOUBLE_QUOTE ISO8601_DATE DOUBLE_QUOTE;
TIME: SINGLE_QUOTE ISO8601_TIME SINGLE_QUOTE | DOUBLE_QUOTE ISO8601_TIME DOUBLE_QUOTE;
DATETIME: SINGLE_QUOTE ISO8601_DATE_TIME SINGLE_QUOTE | DOUBLE_QUOTE ISO8601_DATE_TIME DOUBLE_QUOTE;

// Strings
STRING: SINGLE_QUOTE (ESCAPE_SEQ | ~[\\\r\n'])* SINGLE_QUOTE | DOUBLE_QUOTE (ESCAPE_SEQ | ~[\\\r\n"])* DOUBLE_QUOTE;

// Symbols
SYM_SEMICOLON: ';';
SYM_LT: '<';
SYM_GT: '>';
SYM_LE: '<=';
SYM_GE: '>=';
SYM_NE: '!=';
SYM_EQ: '=';
COMMA: ',';
SYM_DOUBLE_DASH: '--';
TABLE :'TABLE ';
ADD:'+';
BEGIN:'BEGIN';
COMMIT:'COMMIT';
UPDATE:'UPDATE';
SET:'SET';
EQ:'EQ';
DELETE:'DELETE';
// Fragments
fragment DIGIT: [0-9];
fragment E_SUFFIX: [Ee] [+-]? DIGIT+;
fragment ISO8601_DATE: DIGIT DIGIT DIGIT DIGIT ('-' DIGIT DIGIT ('-' DIGIT DIGIT)?)?;
fragment ISO8601_TIME: DIGIT DIGIT (':' DIGIT DIGIT (':' DIGIT DIGIT ('.' DIGIT+)?)?)?;
fragment ISO8601_DATE_TIME: ISO8601_DATE ('T' ISO8601_TIME)?;
fragment SINGLE_QUOTE: '\'';
fragment DOUBLE_QUOTE: '"';
fragment ESCAPE_SEQ: '\\' [\\'"bfnrt];
